/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,19],$V1=[5,15,19],$V2=[5,15,18,19],$V3=[5,15,16,18,19],$V4=[5,14,15,16,18,19],$V5=[5,14,15,16,18,19,23,24,25],$V6=[1,48],$V7=[1,49],$V8=[1,50],$V9=[1,51],$Va=[1,52],$Vb=[1,53],$Vc=[1,54],$Vd=[1,55],$Ve=[1,56],$Vf=[1,57],$Vg=[1,58],$Vh=[1,59],$Vi=[1,60],$Vj=[1,61],$Vk=[1,62],$Vl=[1,63],$Vm=[1,64],$Vn=[1,65],$Vo=[1,66],$Vp=[1,46],$Vq=[1,43],$Vr=[1,44],$Vs=[1,35],$Vt=[1,47],$Vu=[1,38],$Vv=[1,40],$Vw=[1,41],$Vx=[1,42],$Vy=[1,27],$Vz=[1,28],$VA=[1,29],$VB=[1,34],$VC=[1,31],$VD=[1,33],$VE=[5,8,14,15,16,18,19,23,24,25],$VF=[5,8,14,15,16,18,19,23,24,25,71],$VG=[1,94],$VH=[1,95],$VI=[1,88],$VJ=[1,89],$VK=[1,79],$VL=[1,80],$VM=[1,81],$VN=[1,82],$VO=[1,83],$VP=[1,84],$VQ=[1,85],$VR=[1,86],$VS=[1,87],$VT=[1,90],$VU=[1,91],$VV=[1,92],$VW=[1,93],$VX=[5,8,9,10,11,12,13,14,15,16,18,19,21,22,23,24,25,37,38,39,40,41,42,52,53,54,55,56,57,58,59,60,61,62,63,64,68,71,87],$VY=[1,100],$VZ=[5,8,9,10,11,12,13,14,15,16,18,19,21,22,23,24,25,32,37,38,39,40,41,42,52,53,54,55,56,57,58,59,60,61,62,63,64,66,68,71,80,87],$V_=[5,14,15,16,18,19,23,24,25,80],$V$=[1,123],$V01=[5,8,9,12,13,14,15,16,18,19,21,22,23,24,25,37,38,39,40,41,42,55,56,57,58,59,60,61,62,63,64,68,71,87],$V11=[1,140],$V21=[5,19,71],$V31=[5,15,18,19,71],$V41=[5,8,9,12,13,14,15,16,18,19,21,22,23,24,25,37,38,39,40,41,42,52,53,54,55,56,57,58,59,60,61,62,63,64,68,71,87],$V51=[5,12,13,37,38,39,40,41,42,52,53,54,55,56,57,58,59,60,61,62,63,64,68,71,87],$V61=[5,8,9,12,13,14,15,16,18,19,21,22,23,24,25,37,38,39,40,41,42,57,58,59,60,61,62,63,64,68,71,87],$V71=[5,8,9,12,13,14,15,16,18,19,21,22,23,24,25,37,38,39,40,41,42,68,71,87],$V81=[5,8,9,12,13,14,15,16,18,19,21,22,23,24,25,37,38,39,40,41,42,61,62,63,64,68,71,87],$V91=[1,163],$Va1=[68,71],$Vb1=[1,173],$Vc1=[1,174],$Vd1=[1,175],$Ve1=[1,176],$Vf1=[1,177],$Vg1=[1,178],$Vh1=[5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,29,30,33,35,37,38,39,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,87];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"select":4,"EOF":5,"keywords":6,"SELECT":7,"FROM":8,"AS":9,"STRICT":10,"IN":11,"AND":12,"OR":13,"WHERE":14,"ORDER":15,"GROUP":16,"BY":17,"HAVING":18,"LIMIT":19,"OFFSET":20,"ASC":21,"DESC":22,"JOIN":23,"LEFT":24,"INNER":25,"dataSourceIdent":26,"DATA_SOURCE_IDENT":27,"ident":28,"IDENT":29,"BINDING_IDENT":30,"complexIdent":31,".":32,"BINDING_IDENT_LIST":33,"number":34,"NUMBER":35,"intervalUnit":36,"YEAR":37,"MONTH":38,"DAY":39,"HOUR":40,"MINUTE":41,"SECOND":42,"interval":43,"INTERVAL":44,"expression":45,"const":46,"STRING":47,"NULL":48,"TRUE":49,"FALSE":50,"DISTINCT":51,"*":52,"%":53,"/":54,"+":55,"-":56,"=":57,"!==":58,"===":59,"!=":60,">":61,">=":62,"<":63,"<=":64,"!":65,"(":66,"expressionsList":67,")":68,"COUNT":69,"BINDING_VALUE_SCALAR":70,",":71,"BINDING_VALUE_LIST":72,"column":73,"columns":74,"selectClause":75,"selectColumns":76,"table":77,"selectFrom":78,"selectJoin":79,"ON":80,"selectWhere":81,"groupping":82,"grouppingList":83,"selectGroup":84,"selectHaving":85,"order":86,"NUMERIC":87,"ordersList":88,"selectOrder":89,"selectLimit":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SELECT",8:"FROM",9:"AS",10:"STRICT",11:"IN",12:"AND",13:"OR",14:"WHERE",15:"ORDER",16:"GROUP",17:"BY",18:"HAVING",19:"LIMIT",20:"OFFSET",21:"ASC",22:"DESC",23:"JOIN",24:"LEFT",25:"INNER",27:"DATA_SOURCE_IDENT",29:"IDENT",30:"BINDING_IDENT",32:".",33:"BINDING_IDENT_LIST",35:"NUMBER",37:"YEAR",38:"MONTH",39:"DAY",40:"HOUR",41:"MINUTE",42:"SECOND",44:"INTERVAL",47:"STRING",48:"NULL",49:"TRUE",50:"FALSE",51:"DISTINCT",52:"*",53:"%",54:"/",55:"+",56:"-",57:"=",58:"!==",59:"===",60:"!=",61:">",62:">=",63:"<",64:"<=",65:"!",66:"(",68:")",69:"COUNT",70:"BINDING_VALUE_SCALAR",71:",",72:"BINDING_VALUE_LIST",80:"ON",87:"NUMERIC"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[26,1],[28,1],[28,1],[28,1],[31,3],[31,3],[31,1],[31,1],[31,1],[34,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[43,3],[43,3],[46,1],[46,1],[46,1],[46,1],[46,1],[45,2],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,2],[45,2],[45,6],[45,5],[45,4],[45,3],[45,4],[45,4],[45,1],[45,1],[45,1],[45,1],[45,3],[67,3],[67,3],[67,1],[67,1],[73,3],[73,3],[73,1],[74,3],[74,1],[75,1],[76,2],[76,2],[77,3],[77,1],[78,3],[78,1],[79,5],[79,6],[79,6],[79,1],[81,3],[81,1],[82,1],[83,3],[83,1],[84,4],[84,1],[85,3],[85,1],[86,2],[86,2],[86,1],[86,3],[86,3],[86,2],[88,3],[88,1],[89,4],[89,1],[90,5],[90,5],[90,3],[90,1],[4,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 117:
 this.$ = $$[$0] 
break;
case 21:
 this.$ = new Nodes.DataSourceIdent($$[$0]) 
break;
case 22: case 24:
 this.$ = new Nodes.Ident($$[$0]); 
break;
case 23:
 this.$ = new Nodes.BindingIdent($$[$0]); 
break;
case 25:
 $$[$0-2].addFragment($$[$0]); this.$ = $$[$0-2]; 
break;
case 26:
 $$[$0-2].addFragment(new Nodes.BindingIdentList($$[$0])); this.$ = $$[$0-2]; 
break;
case 27:
 this.$ = new Nodes.ComplexIdent(['@', new Nodes.BindingIdentList($$[$0])]); 
break;
case 28:
 this.$ = new Nodes.ComplexIdent(['@', $$[$0]]); 
break;
case 29:
 this.$ = new Nodes.ComplexIdent([$$[$0].name]); 
break;
case 30:
 this.$ = new Nodes.Number($$[$0]); 
break;
case 31:
 this.$ = Nodes.Interval.UNIT_YEAR; 
break;
case 32:
 this.$ = Nodes.Interval.UNIT_MONTH; 
break;
case 33:
 this.$ = Nodes.Interval.UNIT_DAY; 
break;
case 34:
 this.$ = Nodes.Interval.UNIT_HOUR; 
break;
case 35:
 this.$ = Nodes.Interval.UNIT_MINUTE; 
break;
case 36:
 this.$ = Nodes.Interval.UNIT_SECOND; 
break;
case 37:
 this.$ = new Nodes.Interval(); this.$.add($$[$0-1], $$[$0]); 
break;
case 38:
 this.$.add($$[$0-1], $$[$0]); 
break;
case 39:
 this.$ = new Nodes.String($$[$0]); 
break;
case 40: case 72: case 94: case 96: case 101: case 103: case 113: case 118:
 this.$ = $$[$0]; 
break;
case 41:
 this.$ = new Nodes.Null(); 
break;
case 42:
 this.$ = new Nodes.Boolean(true); 
break;
case 43:
 this.$ = new Nodes.Boolean(false); 
break;
case 44:
 this.$ = new Nodes.Distinct($$[$0]); 
break;
case 45: case 46: case 47: case 48: case 49: case 50: case 51:
 this.$ = new Nodes.BinaryArithmeticOperation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 52: case 53: case 54: case 55: case 58: case 59: case 60: case 61:
 this.$ = new Nodes.ComparsionOperation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 56: case 57:
 this.$ = new Nodes.LogicalOperation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 62:
 this.$ = new Nodes.UnaryArithmeticOperation($$[$0-1], $$[$0]); 
break;
case 63:
 this.$ = new Nodes.UnaryLogicalOperation($$[$0-1], $$[$0]); 
break;
case 64:
 this.$ = new Nodes.StrictIn($$[$0-5], $$[$0-1]); 
break;
case 65:
 this.$ = new Nodes.UnstrictIn($$[$0-4], $$[$0-1]); 
break;
case 66:
 this.$ = new Nodes.Call(new Nodes.FunctionIdent($$[$0-3]), $$[$0-1]); 
break;
case 67:
 this.$ = new Nodes.Call(new Nodes.FunctionIdent($$[$0-2])); 
break;
case 68:
 this.$ = new Nodes.Call(new Nodes.FunctionIdent(new Nodes.ComplexIdent['@', $$[$0-3]]), new Nodes.ExpressionsList([$$[$0-1]])); 
break;
case 69:
 this.$ = new Nodes.Call(new Nodes.FunctionIdent(new Nodes.ComplexIdent(['@', $$[$0-3]]))); 
break;
case 70:
 this.$ = new Nodes.ColumnIdent(['@', $$[$0]]) 
break;
case 71:
 this.$ = Nodes.ColumnIdent.fromComplexIdent($$[$0]) 
break;
case 73:
 this.$ = new Nodes.BindingValueScalar($$[$0]); 
break;
case 74:
 this.$ = new Nodes.Brackets($$[$0-1]); 
break;
case 75: case 98: case 110:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 76:
 $$[$0-2].push(new Nodes.BindingValueList($$[$0])); this.$ = $$[$0-2]; 
break;
case 77:
 this.$ = new Nodes.ExpressionsList([new Nodes.BindingValueList($$[$0])]); 
break;
case 78:
 this.$ = new Nodes.ExpressionsList([$$[$0]]); 
break;
case 79:
 this.$ = new Nodes.Column($$[$0-2], $$[$0]); 
break;
case 80:
 this.$ = new Nodes.Column($$[$0-2], new Nodes.ColumnIdent(['@', $$[$0]])); 
break;
case 81:
 var sql = yy.lexer[JL_JISON_INPUT_SYMBOL].slice(this._$.range[0], this._$.range[1]); this.$ = new Nodes.Column($$[$0], null, sql);
break;
case 82:
 this.$ = $$[$0-2].concat($$[$0]); 
break;
case 83: case 99: case 111:
 this.$ = [$$[$0]]; 
break;
case 84:
 this.$ = new Nodes.Select(); 
break;
case 85:
 $$[$0-1].columns = $$[$0]; this.$ = $$[$0-1]; 
break;
case 86:
 $$[$0-1].columns = []; this.$ = $$[$0-1]; 
break;
case 87:
 this.$ = new Nodes.Table(new Nodes.TableLocation($$[$0-2]), new Nodes.TableAlias($$[$0])); 
break;
case 88:
 this.$ = new Nodes.Table(new Nodes.TableLocation($$[$0])); 
break;
case 89:
 $$[$0-2].table = $$[$0]; this.$ = $$[$0-2]; 
break;
case 90:
 $$[$0].table = null; this.$ = $$[$0]; 
break;
case 91:
 $$[$0-4].join(new Nodes.InnerJoin($$[$0-2], $$[$0])); this.$ = $$[$0-4]; 
break;
case 92:
 $$[$0-5].join(new Nodes.InnerJoin($$[$0-2], $$[$0])); this.$ = $$[$0-5]; 
break;
case 93:
 $$[$0-5].join(new Nodes.LeftJoin($$[$0-2], $$[$0])); this.$ = $$[$0-5]; 
break;
case 95:
 $$[$0-2].where = $$[$0]; this.$ = $$[$0-2]; 
break;
case 97:
 this.$ = new Nodes.GroupBy($$[$0]); 
break;
case 100:
 $$[$0-3].groups = $$[$0]; this.$ = $$[$0-3]; 
break;
case 102:
 $$[$0-2].having = $$[$0]; this.$ = $$[$0-2]; 
break;
case 104: case 105:
 this.$ = new Nodes.OrderBy($$[$0-1], $$[$0]) 
break;
case 106:
 this.$ = new Nodes.OrderBy($$[$0]) 
break;
case 107: case 108:
 this.$ = new Nodes.OrderBy($$[$0-2], $$[$0], $$[$0-1]) 
break;
case 109:
 this.$ = new Nodes.OrderBy($$[$0-1], 'ASC', $$[$0]) 
break;
case 112:
 $$[$0-3].orders = $$[$0]; this.$ = $$[$0-3]; 
break;
case 114:
 $$[$0-4].setLimit($$[$0].value, $$[$0-2].value); this.$ = $$[$0-4]; 
break;
case 115:
 $$[$0-4].setLimit($$[$0-2].value, $$[$0].value); this.$ = $$[$0-4]; 
break;
case 116:
 $$[$0-2].setLimit($$[$0].value); this.$ = $$[$0-2]; 
break;
}
},
table: [{3:1,4:2,7:[1,12],75:11,76:10,78:9,79:8,81:7,84:6,85:5,89:4,90:3},{1:[3]},{5:[1,13]},{5:[2,118]},{5:[2,117],19:[1,14]},o($V0,[2,113],{15:[1,15]}),o($V1,[2,103],{18:[1,16]}),o($V2,[2,101],{16:[1,17]}),o($V3,[2,96],{14:[1,18]}),o($V4,[2,94],{23:[1,19],24:[1,21],25:[1,20]}),o($V5,[2,90],{8:[1,22]}),{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:26,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:[1,24],56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD,73:25,74:23},o([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,29,30,33,35,47,48,49,50,51,52,56,65,66,69,70],[2,84]),{1:[2,1]},{34:67,35:$Vt},{17:[1,68]},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:69,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{17:[1,70]},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:71,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:73,33:$Vs,77:72},{23:[1,74]},{23:[1,75]},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:73,33:$Vs,77:76},o($VE,[2,85],{71:[1,77]}),o($VE,[2,86]),o($VF,[2,83]),o($VF,[2,81],{9:[1,78],10:$VG,11:$VH,12:$VI,13:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW}),{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:96,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:97,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:98,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},o($VX,[2,71],{32:$VY,66:[1,99]}),o($VX,[2,70],{66:[1,101]}),o($VX,[2,72]),o($VX,[2,73]),{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:102,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},o($VZ,[2,27]),o($VZ,[2,28]),o($VZ,[2,29]),o($VX,[2,39]),o($VX,[2,40]),o($VX,[2,41]),o($VX,[2,42]),o($VX,[2,43]),o($VZ,[2,22]),o($VZ,[2,23]),o($VZ,[2,24]),o($VZ,[2,21]),o([5,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,37,38,39,40,41,42,52,53,54,55,56,57,58,59,60,61,62,63,64,68,71,87],[2,30]),o($VZ,[2,2]),o($VZ,[2,3]),o($VZ,[2,4]),o($VZ,[2,5]),o($VZ,[2,6]),o($VZ,[2,7]),o($VZ,[2,8]),o($VZ,[2,9]),o($VZ,[2,10]),o($VZ,[2,11]),o($VZ,[2,12]),o($VZ,[2,13]),o($VZ,[2,14]),o($VZ,[2,15]),o($VZ,[2,16]),o($VZ,[2,17]),o($VZ,[2,18]),o($VZ,[2,19]),o($VZ,[2,20]),{5:[2,116],20:[1,104],71:[1,103]},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:107,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD,86:106,88:105},o($V1,[2,102],{10:$VG,11:$VH,12:$VI,13:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW}),{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:110,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD,82:109,83:108},o($V3,[2,95],{10:$VG,11:$VH,12:$VI,13:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW}),{80:[1,111]},o($V_,[2,88],{9:[1,112],32:$VY}),{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:73,33:$Vs,77:113},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:73,33:$Vs,77:114},o($V5,[2,89]),{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:26,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD,73:25,74:115},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:116,33:$Vs,69:[1,117]},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:118,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:119,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:120,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,43:122,44:$V$,45:121,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,43:125,44:$V$,45:124,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:126,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:127,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:128,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:129,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:130,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:131,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:132,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:133,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:134,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:135,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{11:[1,136]},{66:[1,137]},o($VX,[2,44]),o($V01,[2,62],{10:$VG,11:$VH,52:$VK,53:$VL,54:$VM}),o($VX,[2,63]),{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:141,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,67:138,68:[1,139],69:$VC,70:$VD,72:$V11},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,28:142,29:$Vq,30:$Vr,33:[1,143]},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:144,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:[1,145],56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{10:$VG,11:$VH,12:$VI,13:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,68:[1,146]},{34:147,35:$Vt},{34:148,35:$Vt},o($V0,[2,112],{71:[1,149]}),o($V21,[2,111]),o($V21,[2,106],{10:$VG,11:$VH,12:$VI,13:$VJ,21:[1,150],22:[1,151],52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,87:[1,152]}),o($V2,[2,100],{71:[1,153]}),o($V31,[2,99]),o($V31,[2,97],{10:$VG,11:$VH,12:$VI,13:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW}),{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:154,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{26:155,27:$Vp},{80:[1,156]},{80:[1,157]},o($VF,[2,82]),o($VF,[2,79],{32:$VY}),o($VF,[2,80]),o($V41,[2,45],{10:$VG,11:$VH}),o($V41,[2,46],{10:$VG,11:$VH}),o($V41,[2,47],{10:$VG,11:$VH}),o($V01,[2,48],{10:$VG,11:$VH,52:$VK,53:$VL,54:$VM}),o($V51,[2,50],{31:30,46:32,28:36,26:37,34:39,6:45,45:158,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,27:$Vp,29:$Vq,30:$Vr,33:$Vs,35:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,65:$VA,66:$VB,69:$VC,70:$VD}),{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:159,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},o($V01,[2,49],{10:$VG,11:$VH,52:$VK,53:$VL,54:$VM}),o($V51,[2,51],{31:30,46:32,28:36,26:37,34:39,6:45,45:158,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,27:$Vp,29:$Vq,30:$Vr,33:$Vs,35:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,65:$VA,66:$VB,69:$VC,70:$VD}),o($V61,[2,52],{10:$VG,11:$VH,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO}),o($V61,[2,53],{10:$VG,11:$VH,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO}),o($V61,[2,54],{10:$VG,11:$VH,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO}),o($V61,[2,55],{10:$VG,11:$VH,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO}),o($V71,[2,56],{10:$VG,11:$VH,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW}),o($V71,[2,57],{10:$VG,11:$VH,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW}),o($V81,[2,58],{10:$VG,11:$VH,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS}),o($V81,[2,59],{10:$VG,11:$VH,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS}),o($V81,[2,60],{10:$VG,11:$VH,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS}),o($V81,[2,61],{10:$VG,11:$VH,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS}),{66:[1,160]},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:141,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,67:161,69:$VC,70:$VD,72:$V11},{68:[1,162],71:$V91},o($VX,[2,67]),o($Va1,[2,77]),o($Va1,[2,78],{10:$VG,11:$VH,12:$VI,13:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW}),o($VZ,[2,25]),o($VZ,[2,26]),{10:$VG,11:$VH,12:$VI,13:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,68:[1,164]},{68:[1,165]},o($VX,[2,74]),{5:[2,114]},{5:[2,115]},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:107,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD,86:166},o($V21,[2,104]),o($V21,[2,105]),o($V21,[2,109],{21:[1,167],22:[1,168]}),{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:110,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD,82:169},o($V4,[2,91],{10:$VG,11:$VH,12:$VI,13:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW}),o($V_,[2,87]),{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:170,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:171,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD},{10:$VG,11:$VH,12:$VI,13:$VJ,36:172,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,42:$Vg1,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW},{10:$VG,11:$VH,12:$VI,13:$VJ,36:179,37:$Vb1,38:$Vc1,39:$Vd1,40:$Ve1,41:$Vf1,42:$Vg1,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW},{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:141,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,67:180,69:$VC,70:$VD,72:$V11},{68:[1,181],71:$V91},o($VX,[2,66]),{6:45,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:37,27:$Vp,28:36,29:$Vq,30:$Vr,31:30,33:$Vs,34:39,35:$Vt,45:182,46:32,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,56:$Vz,65:$VA,66:$VB,69:$VC,70:$VD,72:[1,183]},o($VX,[2,68]),o($VX,[2,69]),o($V21,[2,110]),o($V21,[2,107]),o($V21,[2,108]),o($V31,[2,98]),o($V4,[2,92],{10:$VG,11:$VH,12:$VI,13:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW}),o($V4,[2,93],{10:$VG,11:$VH,12:$VI,13:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW}),o($Vh1,[2,38]),o($Vh1,[2,31]),o($Vh1,[2,32]),o($Vh1,[2,33]),o($Vh1,[2,34]),o($Vh1,[2,35]),o($Vh1,[2,36]),o($Vh1,[2,37]),{68:[1,184],71:$V91},o($VX,[2,65]),o($Va1,[2,75],{10:$VG,11:$VH,12:$VI,13:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW}),o($Va1,[2,76]),o($VX,[2,64])],
defaultActions: {3:[2,118],13:[2,1],147:[2,114],148:[2,115]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

const Nodes = require('./Nodes.js');
const JL_JISON_INPUT_SYMBOL = Symbol('JL_JISON_INPUT_SYMBOL');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"ranges":true,"backtrack_lexer":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
if (!(JL_JISON_INPUT_SYMBOL in yy.lexer)) {
	yy.lexer[JL_JISON_INPUT_SYMBOL] = this.matches.input;
}

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1: return 71; 
break;
case 2: return 48; 
break;
case 3: return 49; 
break;
case 4: return 50; 
break;
case 5: return 7; 
break;
case 6: return 8; 
break;
case 7: return 51; 
break;
case 8: return 87; 
break;
case 9: return 14; 
break;
case 10: return 15; 
break;
case 11: return 16; 
break;
case 12: return 17; 
break;
case 13: return 18; 
break;
case 14: return 69; 
break;
case 15: return 19; 
break;
case 16: return 20; 
break;
case 17: return 24; 
break;
case 18: return 25; 
break;
case 19: return 44; 
break;
case 20: return 37; 
break;
case 21: return 38; 
break;
case 22: return 39; 
break;
case 23: return 40; 
break;
case 24: return 41; 
break;
case 25: return 42; 
break;
case 26: return 47; 
break;
case 27: return 47; 
break;
case 28: return 35; 
break;
case 29: return 70; 
break;
case 30: return 72; 
break;
case 31: return 30; 
break;
case 32: return 33; 
break;
case 33: return 9; 
break;
case 34: return 21; 
break;
case 35: return 22; 
break;
case 36: return 10; 
break;
case 37: return 11; 
break;
case 38: return 80; 
break;
case 39: return 23; 
break;
case 40: return 55; 
break;
case 41: return 56; 
break;
case 42: return 54; 
break;
case 43: return 52; 
break;
case 44: return 53; 
break;
case 45: return 59; 
break;
case 46: return 58; 
break;
case 47: return 57; 
break;
case 48: return 57; 
break;
case 49: return 66; 
break;
case 50: return 68; 
break;
case 51: return 64; 
break;
case 52: return 62; 
break;
case 53: return 63; 
break;
case 54: return 61; 
break;
case 55: return 12; 
break;
case 56: return 12; 
break;
case 57: return 13; 
break;
case 58: return 13; 
break;
case 59: return 32; 
break;
case 60: return 60; 
break;
case 61: return 65; 
break;
case 62: return 27; 
break;
case 63: return 29; 
break;
case 64: return 29; 
break;
case 65: return 5; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:,)/i,/^(?:NULL\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:DISTINCT\b)/i,/^(?:NUMERIC\b)/i,/^(?:WHERE\b)/i,/^(?:ORDER\b)/i,/^(?:GROUP\b)/i,/^(?:BY\b)/i,/^(?:HAVING\b)/i,/^(?:COUNT\b)/i,/^(?:LIMIT\b)/i,/^(?:OFFSET\b)/i,/^(?:LEFT\b)/i,/^(?:INNER\b)/i,/^(?:INTERVAL\b)/i,/^(?:YEAR\b)/i,/^(?:MONTH\b)/i,/^(?:DAY\b)/i,/^(?:HOUR\b)/i,/^(?:MINUTE\b)/i,/^(?:SECOND\b)/i,/^(?:"(\\.|[^\\"])*")/i,/^(?:'(\\.|[^\\'])*')/i,/^(?:[+-]?[0-9][0-9.]*)/i,/^(?::[a-z_][a-z0-9_]*)/i,/^(?:::[a-z_][a-z0-9_]*)/i,/^(?:\[:[a-z_][a-z0-9_]*\])/i,/^(?:\[::[a-z_][a-z0-9_]*\])/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:STRICT\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:JOIN\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:===)/i,/^(?:!==)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:AND\b)/i,/^(?:&&)/i,/^(?:OR\b)/i,/^(?:\|\|)/i,/^(?:\.)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:(@([a-z_][a-z0-9_]*|)))/i,/^(?:`(\\.|[^\\`])*`)/i,/^(?:([a-z_][a-z0-9_]*))/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
