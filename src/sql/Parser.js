/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,19],$V1=[5,15,19],$V2=[5,15,18,19],$V3=[5,15,16,18,19],$V4=[5,14,15,16,18,19],$V5=[5,14,15,16,18,19,23,24,25],$V6=[1,46],$V7=[1,47],$V8=[1,48],$V9=[1,49],$Va=[1,50],$Vb=[1,51],$Vc=[1,52],$Vd=[1,53],$Ve=[1,54],$Vf=[1,55],$Vg=[1,56],$Vh=[1,57],$Vi=[1,58],$Vj=[1,59],$Vk=[1,60],$Vl=[1,61],$Vm=[1,62],$Vn=[1,63],$Vo=[1,64],$Vp=[1,44],$Vq=[1,42],$Vr=[1,45],$Vs=[1,37],$Vt=[1,39],$Vu=[1,40],$Vv=[1,41],$Vw=[1,27],$Vx=[1,28],$Vy=[1,29],$Vz=[1,34],$VA=[1,31],$VB=[1,33],$VC=[5,8,14,15,16,18,19,23,24,25],$VD=[5,8,14,15,16,18,19,23,24,25,60],$VE=[1,92],$VF=[1,93],$VG=[1,86],$VH=[1,87],$VI=[1,77],$VJ=[1,78],$VK=[1,79],$VL=[1,80],$VM=[1,81],$VN=[1,82],$VO=[1,83],$VP=[1,84],$VQ=[1,85],$VR=[1,88],$VS=[1,89],$VT=[1,90],$VU=[1,91],$VV=[5,8,9,10,11,12,13,14,15,16,18,19,21,22,23,24,25,41,42,43,44,45,46,47,48,49,50,51,52,53,57,60,76],$VW=[1,98],$VX=[5,8,9,10,11,12,13,14,15,16,18,19,21,22,23,24,25,31,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,60,69,76],$VY=[5,14,15,16,18,19,23,24,25,69],$VZ=[5,8,9,12,13,14,15,16,18,19,21,22,23,24,25,44,45,46,47,48,49,50,51,52,53,57,60,76],$V_=[1,135],$V$=[5,19,60],$V01=[5,15,18,19,60],$V11=[5,8,9,12,13,14,15,16,18,19,21,22,23,24,25,41,42,43,44,45,46,47,48,49,50,51,52,53,57,60,76],$V21=[5,8,9,12,13,14,15,16,18,19,21,22,23,24,25,46,47,48,49,50,51,52,53,57,60,76],$V31=[5,8,9,12,13,14,15,16,18,19,21,22,23,24,25,57,60,76],$V41=[5,8,9,12,13,14,15,16,18,19,21,22,23,24,25,50,51,52,53,57,60,76],$V51=[1,155],$V61=[57,60];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"select":4,"EOF":5,"keywords":6,"SELECT":7,"FROM":8,"AS":9,"STRICT":10,"IN":11,"AND":12,"OR":13,"WHERE":14,"ORDER":15,"GROUP":16,"BY":17,"HAVING":18,"LIMIT":19,"OFFSET":20,"ASC":21,"DESC":22,"JOIN":23,"LEFT":24,"INNER":25,"dataSourceIdent":26,"DATA_SOURCE_IDENT":27,"ident":28,"IDENT":29,"complexIdent":30,".":31,"number":32,"NUMBER":33,"const":34,"STRING":35,"NULL":36,"TRUE":37,"FALSE":38,"expression":39,"DISTINCT":40,"*":41,"%":42,"/":43,"+":44,"-":45,"=":46,"!==":47,"===":48,"!=":49,">":50,">=":51,"<":52,"<=":53,"!":54,"(":55,"expressionsList":56,")":57,"COUNT":58,"BINDING_VALUE_SCALAR":59,",":60,"BINDING_VALUE_LIST":61,"column":62,"columns":63,"selectClause":64,"selectColumns":65,"table":66,"selectFrom":67,"selectJoin":68,"ON":69,"selectWhere":70,"groupping":71,"grouppingList":72,"selectGroup":73,"selectHaving":74,"order":75,"NUMERIC":76,"ordersList":77,"selectOrder":78,"selectLimit":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SELECT",8:"FROM",9:"AS",10:"STRICT",11:"IN",12:"AND",13:"OR",14:"WHERE",15:"ORDER",16:"GROUP",17:"BY",18:"HAVING",19:"LIMIT",20:"OFFSET",21:"ASC",22:"DESC",23:"JOIN",24:"LEFT",25:"INNER",27:"DATA_SOURCE_IDENT",29:"IDENT",31:".",33:"NUMBER",35:"STRING",36:"NULL",37:"TRUE",38:"FALSE",40:"DISTINCT",41:"*",42:"%",43:"/",44:"+",45:"-",46:"=",47:"!==",48:"===",49:"!=",50:">",51:">=",52:"<",53:"<=",54:"!",55:"(",57:")",58:"COUNT",59:"BINDING_VALUE_SCALAR",60:",",61:"BINDING_VALUE_LIST",69:"ON",76:"NUMERIC"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[26,1],[28,1],[28,1],[30,3],[30,1],[30,1],[32,1],[34,1],[34,1],[34,1],[34,1],[34,1],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,2],[39,6],[39,5],[39,4],[39,3],[39,4],[39,4],[39,1],[39,1],[39,1],[39,1],[39,3],[56,3],[56,3],[56,1],[56,1],[62,3],[62,3],[62,1],[63,3],[63,1],[64,1],[65,2],[65,2],[66,3],[66,1],[67,3],[67,1],[68,5],[68,6],[68,6],[68,1],[70,3],[70,1],[71,1],[72,3],[72,1],[73,4],[73,1],[74,3],[74,1],[75,2],[75,2],[75,1],[75,3],[75,3],[75,2],[77,3],[77,1],[78,4],[78,1],[79,5],[79,5],[79,3],[79,1],[4,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 104:
 this.$ = $$[$0] 
break;
case 21:
 this.$ = new Nodes.DataSourceIdent($$[$0]) 
break;
case 22: case 23:
 this.$ = new Nodes.Ident($$[$0]); 
break;
case 24:
 $$[$0-2].addFragment($$[$0].name); this.$ = $$[$0-2]; 
break;
case 25:
 this.$ = new Nodes.ComplexIdent(['@', $$[$0].name]); 
break;
case 26:
 this.$ = new Nodes.ComplexIdent([$$[$0].name]); 
break;
case 27:
 this.$ = new Nodes.Number($$[$0]); 
break;
case 28:
 this.$ = new Nodes.String($$[$0]); 
break;
case 29: case 59: case 81: case 83: case 88: case 90: case 100: case 105:
 this.$ = $$[$0]; 
break;
case 30:
 this.$ = new Nodes.Null(); 
break;
case 31:
 this.$ = new Nodes.Boolean(true); 
break;
case 32:
 this.$ = new Nodes.Boolean(false); 
break;
case 33:
 this.$ = new Nodes.Distinct($$[$0]); 
break;
case 34: case 35: case 36: case 37: case 38:
 this.$ = new Nodes.BinaryArithmeticOperation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 39: case 40: case 41: case 42: case 45: case 46: case 47: case 48:
 this.$ = new Nodes.ComparsionOperation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 43: case 44:
 this.$ = new Nodes.LogicalOperation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 49:
 this.$ = new Nodes.UnaryArithmeticOperation($$[$0-1], $$[$0]); 
break;
case 50:
 this.$ = new Nodes.UnaryLogicalOperation($$[$0-1], $$[$0]); 
break;
case 51:
 this.$ = new Nodes.StrictIn($$[$0-5], $$[$0-1]); 
break;
case 52:
 this.$ = new Nodes.UnstrictIn($$[$0-4], $$[$0-1]); 
break;
case 53:
 this.$ = new Nodes.Call(Nodes.FunctionIdent.fromComplexIdent($$[$0-3]), $$[$0-1]); 
break;
case 54:
 this.$ = new Nodes.Call(Nodes.FunctionIdent.fromComplexIdent($$[$0-2])); 
break;
case 55:
 this.$ = new Nodes.Call(new Nodes.FunctionIdent([$$[$0-3]]), new Nodes.ExpressionsList([$$[$0-1]])); 
break;
case 56:
 this.$ = new Nodes.Call(new Nodes.FunctionIdent([$$[$0-3]])); 
break;
case 57:
 this.$ = new Nodes.ColumnIdent(['@', $$[$0]]) 
break;
case 58:
 this.$ = Nodes.ColumnIdent.fromComplexIdent($$[$0]) 
break;
case 60:
 this.$ = new Nodes.BindingValueScalar($$[$0]); 
break;
case 61:
 this.$ = new Nodes.Brackets($$[$0-1]); 
break;
case 62: case 85: case 97:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 63:
 $$[$0-2].push(new Nodes.BindingValueList($$[$0])); this.$ = $$[$0-2]; 
break;
case 64:
 this.$ = new Nodes.BindingValueList($$[$0]); 
break;
case 65:
 this.$ = new Nodes.ExpressionsList([$$[$0]]); 
break;
case 66:
 this.$ = new Nodes.Column($$[$0-2], $$[$0]); 
break;
case 67:
 this.$ = new Nodes.Column($$[$0-2], new Nodes.ColumnIdent(['@', $$[$0]])); 
break;
case 68:
 var sql = yy.lexer[JL_JISON_INPUT_SYMBOL].slice(this._$.range[0], this._$.range[1]); this.$ = new Nodes.Column($$[$0], null, sql);
break;
case 69:
 this.$ = $$[$0-2].concat($$[$0]); 
break;
case 70: case 86: case 98:
 this.$ = [$$[$0]]; 
break;
case 71:
 this.$ = new Nodes.Select(); 
break;
case 72:
 $$[$0-1].columns = $$[$0]; this.$ = $$[$0-1]; 
break;
case 73:
 $$[$0-1].columns = []; this.$ = $$[$0-1]; 
break;
case 74:
 this.$ = new Nodes.Table(new Nodes.TableLocation($$[$0-2]), new Nodes.TableAlias($$[$0])); 
break;
case 75:
 this.$ = new Nodes.Table(new Nodes.TableLocation($$[$0])); 
break;
case 76:
 $$[$0-2].table = $$[$0]; this.$ = $$[$0-2]; 
break;
case 77:
 $$[$0].table = null; this.$ = $$[$0]; 
break;
case 78:
 $$[$0-4].join(new Nodes.InnerJoin($$[$0-2], $$[$0])); this.$ = $$[$0-4]; 
break;
case 79:
 $$[$0-5].join(new Nodes.InnerJoin($$[$0-2], $$[$0])); this.$ = $$[$0-5]; 
break;
case 80:
 $$[$0-5].join(new Nodes.LeftJoin($$[$0-2], $$[$0])); this.$ = $$[$0-5]; 
break;
case 82:
 $$[$0-2].where = $$[$0]; this.$ = $$[$0-2]; 
break;
case 84:
 this.$ = new Nodes.GroupBy($$[$0]); 
break;
case 87:
 $$[$0-3].groups = $$[$0]; this.$ = $$[$0-3]; 
break;
case 89:
 $$[$0-2].having = $$[$0]; this.$ = $$[$0-2]; 
break;
case 91: case 92:
 this.$ = new Nodes.OrderBy($$[$0-1], $$[$0]) 
break;
case 93:
 this.$ = new Nodes.OrderBy($$[$0]) 
break;
case 94: case 95:
 this.$ = new Nodes.OrderBy($$[$0-2], $$[$0], $$[$0-1]) 
break;
case 96:
 this.$ = new Nodes.OrderBy($$[$0-1], 'ASC', $$[$0]) 
break;
case 99:
 $$[$0-3].orders = $$[$0]; this.$ = $$[$0-3]; 
break;
case 101:
 $$[$0-4].setLimit($$[$0].value, $$[$0-2].value); this.$ = $$[$0-4]; 
break;
case 102:
 $$[$0-4].setLimit($$[$0-2].value, $$[$0].value); this.$ = $$[$0-4]; 
break;
case 103:
 $$[$0-2].setLimit($$[$0].value); this.$ = $$[$0-2]; 
break;
}
},
table: [{3:1,4:2,7:[1,12],64:11,65:10,67:9,68:8,70:7,73:6,74:5,78:4,79:3},{1:[3]},{5:[1,13]},{5:[2,105]},{5:[2,104],19:[1,14]},o($V0,[2,100],{15:[1,15]}),o($V1,[2,90],{18:[1,16]}),o($V2,[2,88],{16:[1,17]}),o($V3,[2,83],{14:[1,18]}),o($V4,[2,81],{23:[1,19],24:[1,21],25:[1,20]}),o($V5,[2,77],{8:[1,22]}),{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:26,40:$Vw,41:[1,24],45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB,62:25,63:23},o([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,29,33,35,36,37,38,40,41,45,54,55,58,59],[2,71]),{1:[2,1]},{32:65,33:$Vr},{17:[1,66]},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:67,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{17:[1,68]},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:69,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:71,66:70},{23:[1,72]},{23:[1,73]},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:71,66:74},o($VC,[2,72],{60:[1,75]}),o($VC,[2,73]),o($VD,[2,70]),o($VD,[2,68],{9:[1,76],10:$VE,11:$VF,12:$VG,13:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU}),{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:94,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:95,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:96,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},o($VV,[2,58],{31:$VW,55:[1,97]}),o($VV,[2,57],{55:[1,99]}),o($VV,[2,59]),o($VV,[2,60]),{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:100,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},o($VX,[2,25]),o($VX,[2,26]),o($VV,[2,28]),o($VV,[2,29]),o($VV,[2,30]),o($VV,[2,31]),o($VV,[2,32]),o($VX,[2,22]),o($VX,[2,23]),o($VX,[2,21]),o([5,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,41,42,43,44,45,46,47,48,49,50,51,52,53,57,60,76],[2,27]),o($VX,[2,2]),o($VX,[2,3]),o($VX,[2,4]),o($VX,[2,5]),o($VX,[2,6]),o($VX,[2,7]),o($VX,[2,8]),o($VX,[2,9]),o($VX,[2,10]),o($VX,[2,11]),o($VX,[2,12]),o($VX,[2,13]),o($VX,[2,14]),o($VX,[2,15]),o($VX,[2,16]),o($VX,[2,17]),o($VX,[2,18]),o($VX,[2,19]),o($VX,[2,20]),{5:[2,103],20:[1,102],60:[1,101]},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:105,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB,75:104,77:103},o($V1,[2,89],{10:$VE,11:$VF,12:$VG,13:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU}),{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:108,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB,71:107,72:106},o($V3,[2,82],{10:$VE,11:$VF,12:$VG,13:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU}),{69:[1,109]},o($VY,[2,75],{9:[1,110],31:$VW}),{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:71,66:111},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:71,66:112},o($V5,[2,76]),{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:26,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB,62:25,63:113},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:114,58:[1,115]},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:116,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:117,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:118,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:119,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:120,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:121,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:122,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:123,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:124,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:125,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:126,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:127,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:128,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:129,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:130,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{11:[1,131]},{55:[1,132]},o($VV,[2,33]),o($VZ,[2,49],{10:$VE,11:$VF,41:$VI,42:$VJ,43:$VK}),o($VV,[2,50]),{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:136,40:$Vw,45:$Vx,54:$Vy,55:$Vz,56:133,57:[1,134],58:$VA,59:$VB,61:$V_},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,28:137,29:$Vq},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:138,40:$Vw,41:[1,139],45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{10:$VE,11:$VF,12:$VG,13:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,57:[1,140]},{32:141,33:$Vr},{32:142,33:$Vr},o($V0,[2,99],{60:[1,143]}),o($V$,[2,98]),o($V$,[2,93],{10:$VE,11:$VF,12:$VG,13:$VH,21:[1,144],22:[1,145],41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,76:[1,146]}),o($V2,[2,87],{60:[1,147]}),o($V01,[2,86]),o($V01,[2,84],{10:$VE,11:$VF,12:$VG,13:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU}),{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:148,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{26:149,27:$Vp},{69:[1,150]},{69:[1,151]},o($VD,[2,69]),o($VD,[2,66],{31:$VW}),o($VD,[2,67]),o($V11,[2,34],{10:$VE,11:$VF}),o($V11,[2,35],{10:$VE,11:$VF}),o($V11,[2,36],{10:$VE,11:$VF}),o($VZ,[2,37],{10:$VE,11:$VF,41:$VI,42:$VJ,43:$VK}),o($VZ,[2,38],{10:$VE,11:$VF,41:$VI,42:$VJ,43:$VK}),o($V21,[2,39],{10:$VE,11:$VF,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM}),o($V21,[2,40],{10:$VE,11:$VF,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM}),o($V21,[2,41],{10:$VE,11:$VF,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM}),o($V21,[2,42],{10:$VE,11:$VF,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM}),o($V31,[2,43],{10:$VE,11:$VF,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU}),o($V31,[2,44],{10:$VE,11:$VF,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU}),o($V41,[2,45],{10:$VE,11:$VF,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ}),o($V41,[2,46],{10:$VE,11:$VF,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ}),o($V41,[2,47],{10:$VE,11:$VF,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ}),o($V41,[2,48],{10:$VE,11:$VF,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ}),{55:[1,152]},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:136,40:$Vw,45:$Vx,54:$Vy,55:$Vz,56:153,58:$VA,59:$VB,61:$V_},{57:[1,154],60:$V51},o($VV,[2,54]),o($V61,[2,64]),o($V61,[2,65],{10:$VE,11:$VF,12:$VG,13:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU}),o($VX,[2,24]),{10:$VE,11:$VF,12:$VG,13:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,57:[1,156]},{57:[1,157]},o($VV,[2,61]),{5:[2,101]},{5:[2,102]},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:105,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB,75:158},o($V$,[2,91]),o($V$,[2,92]),o($V$,[2,96],{21:[1,159],22:[1,160]}),{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:108,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB,71:161},o($V4,[2,78],{10:$VE,11:$VF,12:$VG,13:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU}),o($VY,[2,74]),{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:162,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:163,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB},{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:136,40:$Vw,45:$Vx,54:$Vy,55:$Vz,56:164,58:$VA,59:$VB,61:$V_},{57:[1,165],60:$V51},o($VV,[2,53]),{6:43,7:$V6,8:$V7,9:$V8,10:$V9,11:$Va,12:$Vb,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:$Vi,20:$Vj,21:$Vk,22:$Vl,23:$Vm,24:$Vn,25:$Vo,26:36,27:$Vp,28:35,29:$Vq,30:30,32:38,33:$Vr,34:32,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:166,40:$Vw,45:$Vx,54:$Vy,55:$Vz,58:$VA,59:$VB,61:[1,167]},o($VV,[2,55]),o($VV,[2,56]),o($V$,[2,97]),o($V$,[2,94]),o($V$,[2,95]),o($V01,[2,85]),o($V4,[2,79],{10:$VE,11:$VF,12:$VG,13:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU}),o($V4,[2,80],{10:$VE,11:$VF,12:$VG,13:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU}),{57:[1,168],60:$V51},o($VV,[2,52]),o($V61,[2,62],{10:$VE,11:$VF,12:$VG,13:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU}),o($V61,[2,63]),o($VV,[2,51])],
defaultActions: {3:[2,105],13:[2,1],141:[2,101],142:[2,102]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

const Nodes = require('./Nodes.js');
const JL_JISON_INPUT_SYMBOL = Symbol('JL_JISON_INPUT_SYMBOL');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"ranges":true,"backtrack_lexer":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
if (!(JL_JISON_INPUT_SYMBOL in yy.lexer)) {
	yy.lexer[JL_JISON_INPUT_SYMBOL] = this.matches.input;
}

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1: return 60; 
break;
case 2: return 36; 
break;
case 3: return 37; 
break;
case 4: return 38; 
break;
case 5: return 7; 
break;
case 6: return 8; 
break;
case 7: return 40; 
break;
case 8: return 76; 
break;
case 9: return 14; 
break;
case 10: return 15; 
break;
case 11: return 16; 
break;
case 12: return 17; 
break;
case 13: return 18; 
break;
case 14: return 58; 
break;
case 15: return 19; 
break;
case 16: return 20; 
break;
case 17: return 24; 
break;
case 18: return 25; 
break;
case 19: return 35; 
break;
case 20: return 35; 
break;
case 21: return 33; 
break;
case 22: return 59; 
break;
case 23: return 61; 
break;
case 24: return 9; 
break;
case 25: return 21; 
break;
case 26: return 22; 
break;
case 27: return 10; 
break;
case 28: return 11; 
break;
case 29: return 69; 
break;
case 30: return 23; 
break;
case 31: return 44; 
break;
case 32: return 45; 
break;
case 33: return 43; 
break;
case 34: return 41; 
break;
case 35: return 42; 
break;
case 36: return 48; 
break;
case 37: return 47; 
break;
case 38: return 46; 
break;
case 39: return 46; 
break;
case 40: return 55; 
break;
case 41: return 57; 
break;
case 42: return 53; 
break;
case 43: return 51; 
break;
case 44: return 52; 
break;
case 45: return 50; 
break;
case 46: return 12; 
break;
case 47: return 12; 
break;
case 48: return 13; 
break;
case 49: return 13; 
break;
case 50: return 31; 
break;
case 51: return 49; 
break;
case 52: return 54; 
break;
case 53: return 27; 
break;
case 54: return 29; 
break;
case 55: return 29; 
break;
case 56: return 5; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:,)/i,/^(?:NULL\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:DISTINCT\b)/i,/^(?:NUMERIC\b)/i,/^(?:WHERE\b)/i,/^(?:ORDER\b)/i,/^(?:GROUP\b)/i,/^(?:BY\b)/i,/^(?:HAVING\b)/i,/^(?:COUNT\b)/i,/^(?:LIMIT\b)/i,/^(?:OFFSET\b)/i,/^(?:LEFT\b)/i,/^(?:INNER\b)/i,/^(?:"(\\.|[^\\"])*")/i,/^(?:'(\\.|[^\\'])*')/i,/^(?:[+-]?[0-9][0-9.]*)/i,/^(?::[a-z_][a-z0-9_]*)/i,/^(?:::[a-z_][a-z0-9_]*)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:STRICT\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:JOIN\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:===)/i,/^(?:!==)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:AND\b)/i,/^(?:&&)/i,/^(?:OR\b)/i,/^(?:\|\|)/i,/^(?:\.)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:(@([a-z_][a-z0-9_]*|)))/i,/^(?:`(\\.|[^\\`])*`)/i,/^(?:([a-z_][a-z0-9_]*))/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
